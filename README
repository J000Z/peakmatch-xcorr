Peak-matched sampled efficient cross-correlation of time series
---------------------------------------------------------------

// TODO overall explanation


process:
- create two directories, for full and sample datasets
- put all events into full
- ensure all events are expected-file-line-count lines long 
	(find /path/to/full -name "*.dat" | xargs wc -l | grep -v 10240 | grep -v total | awk '{print $2}' | xargs -I xx mv xx /path/to/wrong-size/dir)
- take small (~500-1000) random sample from full into sample
 	(ls /path/to/full | shuf | head -500 | xargs -I xx cp /path/to/full/xx /path/to/sample)
 	
- edit xcorr.conf, add locations of dataset directories

- initial parameter refinement: first set mode=ANALYSE, run, observe output

- change parameters in config file until performance / accuracy tradeoff is acceptable:
	- top-n-peaks: top N peaks (both min and max), ordered by amplitude, which will be aligned together
		run-time varies as O(top-n-peaks ^ 2) - every event's top N peaks are aligned against every other event's top N peaks
	- sampling-stride: sample events every sampling-stride entries
		run-time varies as O(1/sampling-stride)
	- top-amplitude-threshold: only calculate xcorr values for values where the amplitude is higher than this fraction of the peak amplitude
		the final xcorr value for a well-matching pair is dominated by the multiplication of two peaks together (eg 1000 * 1000 >> 50 * 50)
		setting this to a non-zero value means eliminating a large amount of noise from the calculations, and drastically speeding up the calculation
		tweak this value in ANALYSE phase: too high -> false negatives. too low -> performance degredation
	- candidate-threshold: threshold for candidates to be included
		this will be lower than the final xcorr calculated value
		tweak this value in ANALYSE phase: too high -> false negatives. too low -> too many false positives for post-processing
	- final-threshold: threshold for the final FFT xcorr post-process step

- set mode=PEAKMATCH, run
// TODO explanation

- set mode=POSTPROCESS, run
// TODO explanation

prerequisites:
java 1.7
maven 2

compilation:
mvn assembly:single

usage:
java -Xmx2G -jar target/peakmatch-jar-with-dependencies.jar

(change 2G (2Gb) in -Xmx2G to whatever memory limits you want to give the process)
